#include <iostream>
#include <memory>
#include <forward_list>
#include <queue>
#include <chrono>
#include <array>

typename std::chrono::time_point<std::chrono::high_resolution_clock> now()
{ return std::chrono::high_resolution_clock::now(); }

template<typename T>
double castT(T x)
{ return std::chrono::duration_cast< std::chrono::duration<double, std::milli> >(x).count(); }

#define repeat(n) for(int ______________ = (n); ______________ > 0; --______________)
#define loop(i, l, r) for(int i = (l), ________r = (r); i <= ________r; ++i)

int main()
{
  repeat(10) {
		auto t = now();
		{
			my::queue<int> q1;
			repeat(1e5) {
				loop(i, 1, 1000)
					q1.push(i);
				repeat(1000)
					q1.pop();
			}
		}
		double ans1 = castT(now() - t);
		
		t = now();
		std::queue<int> q2;
		repeat(1e5) {
			loop(i, 1, 1000)
				q2.push(i);
			repeat(1000)
				q2.pop();
		}
		double ans2 = castT(now() - t);
		
		std::cerr << ans1 << ' ' << ans2 << " | " << ans1 / ans2 << '\n';
	}
}
